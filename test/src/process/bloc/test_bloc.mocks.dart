// Mocks generated by Mockito 5.4.4 from annotations
// in bloc_process/test/src/process/bloc/test_bloc.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc_process/bloc_process.dart' as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

import '../io/test_input.dart' as _i7;
import '../io/test_output.dart' as _i6;
import 'test_bloc.dart' as _i3;
import 'test_event.dart' as _i8;
import 'test_state.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTestState_0 extends _i1.SmartFake implements _i2.TestState {
  _FakeTestState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TestBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestBloc extends _i1.Mock implements _i3.TestBloc {
  @override
  _i4.Stream<_i5.Effect> get effectStream => (super.noSuchMethod(
        Invocation.getter(#effectStream),
        returnValue: _i4.Stream<_i5.Effect>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.Effect>.empty(),
      ) as _i4.Stream<_i5.Effect>);

  @override
  _i4.Stream<_i5.ErrorEvent> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i4.Stream<_i5.ErrorEvent>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.ErrorEvent>.empty(),
      ) as _i4.Stream<_i5.ErrorEvent>);

  @override
  void Function(_i6.TestOutput) get completeCallback => (super.noSuchMethod(
        Invocation.getter(#completeCallback),
        returnValue: (_i6.TestOutput value) {},
        returnValueForMissingStub: (_i6.TestOutput value) {},
      ) as void Function(_i6.TestOutput));

  @override
  set completeCallback(void Function(_i6.TestOutput)? _completeCallback) =>
      super.noSuchMethod(
        Invocation.setter(
          #completeCallback,
          _completeCallback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set backOutCallback(void Function()? _backOutCallback) => super.noSuchMethod(
        Invocation.setter(
          #backOutCallback,
          _backOutCallback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.TestState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTestState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeTestState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.TestState);

  @override
  _i4.Stream<_i2.TestState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.TestState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.TestState>.empty(),
      ) as _i4.Stream<_i2.TestState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic initialize(_i7.TestInput? input) => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [input],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i8.TestEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool shouldNavigationOnStart() => (super.noSuchMethod(
        Invocation.method(
          #shouldNavigationOnStart,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool shouldNavigationOnEnd() => (super.noSuchMethod(
        Invocation.method(
          #shouldNavigationOnEnd,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool shouldNavigationOnRevive() => (super.noSuchMethod(
        Invocation.method(
          #shouldNavigationOnRevive,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void emitEffect(_i5.Effect? event) => super.noSuchMethod(
        Invocation.method(
          #emitEffect,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void emitError(_i5.ErrorEvent? event) => super.noSuchMethod(
        Invocation.method(
          #emitError,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void complete(_i6.TestOutput? value) => super.noSuchMethod(
        Invocation.method(
          #complete,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void backOut() => super.noSuchMethod(
        Invocation.method(
          #backOut,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void mountCallbacks(
    void Function(_i6.TestOutput)? callback,
    void Function()? backOut,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #mountCallbacks,
          [
            callback,
            backOut,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void mountMiddleware(List<_i5.Middleware>? middleware) => super.noSuchMethod(
        Invocation.method(
          #mountMiddleware,
          [middleware],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.TestEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.TestState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.TestEvent>(
    _i9.EventHandler<E, _i2.TestState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i9.Transition<_i8.TestEvent, _i2.TestState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i2.TestState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
